# -*- coding: utf-8 -*-
"""Gas Predictive Maintenance Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OE0_2tEKQ0eTioGumbkhW2F4OuNDIqHX
"""

import pandas as pd
import numpy as np
import os
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

dataset = pd.read_csv("pipe_thickness_loss_dataset.csv", encoding='ascii', delimiter=',')

dataset.describe()

dataset.head()

dataset.tail()

# Check for missing values in the entire dataset
missing_values = dataset.isna().sum()

# Display the count of missing values per column
print("Missing values per column:")
print(missing_values)

# Check if any column has missing values
if dataset.isna().any().any():
    print("\nThe dataset contains missing values.")
else:
    print("\nNo missing values found in the dataset.")

# Separate features and target

X = dataset.drop(columns=['Condition'])  # Features
y = dataset['Condition']  # Target

# One-Hot Encode Material and Grade

X = pd.get_dummies(X, columns=['Material', 'Grade'], drop_first=True)

# Define features for the model

features = X.columns

# Split the data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model

model = DecisionTreeClassifier(max_depth=3, min_samples_split=20, random_state=42)
model.fit(X_train, y_train)

# Evaluate

accuracy = model.score(X_test, y_test)
print(f"Model Accuracy: {accuracy:.2f}")

from sklearn.metrics import classification_report
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

#!pip install streamlit

import streamlit as st

# Set page configuration to use system theme
st.set_page_config(page_title="Gas Pipeline Maintenance Predictor", layout="wide", page_icon=":factory:")

# Custom CSS for theme-aware design
st.markdown(
    """
    <style>
    .main {
        background-color: var(--background-color);
        color: var(--text-color);
        padding: 20px;
        border-radius: 10px;
    }
    .stButton>button {
        background-color: var(--button-color, #4CAF50);
        color: var(--button-text-color, white);
        border-radius: 5px;
        padding: 10px 20px;
    }
    .stNumberInput, .stSelectbox div {
        background-color: var(--input-bg-color, #ffffff);
        color: var(--input-text-color, #000000);
        border-radius: 5px;
        padding: 5px;
    }
    .result-box {
        background-color: var(--result-bg-color, #ffeb3b);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: var(--result-text-color, #333);
        margin-top: 20px;
        border: 2px solid var(--result-border-color, #ccc);
    }
    .header {
        color: var(--header-color, #2c3e50);
        text-align: center;
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 20px;
    }
    /* Theme-specific adjustments */
    @media (prefers-color-scheme: dark) {
        .main {
            background-color: #1a1a1a;
        }
        .stNumberInput, .stSelectbox div {
            background-color: #2e2e2e;
            color: #ffffff;
        }
        .result-box {
            background-color: #ff9800;
            color: #ffffff;
            border-color: #555;
        }
        .header {
            color: #dcdcdc;
        }
    }
    @media (prefers-color-scheme: light) {
        .main {
            background-color: #f0f2f6;
        }
        .stNumberInput, .stSelectbox div {
            background-color: #ffffff;
            color: #000000;
        }
        .result-box {
            background-color: #ffeb3b;
            color: #333;
            border-color: #ccc;
        }
        .header {
            color: #2c3e50;
        }
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Header
st.markdown('<div class="header">Gas Pipeline Maintenance Predictor</div>', unsafe_allow_html=True)

# Input Section with Columns
col1, col2 = st.columns(2)
with col1:
    pressure = st.number_input("Max Pressure (psi)", min_value=0.0, step=1.0, key="pressure")
    temp = st.number_input("Temperature (Â°C)", min_value=0.0, step=1.0, key="temp")
    corrosion = st.number_input("Corrosion Impact (%)", min_value=0.0, max_value=100.0, step=1.0, key="corrosion")
with col2:
    loss = st.number_input("Thickness Loss (mm)", min_value=0.0, step=0.1, key="loss")
    years = st.number_input("Time Years", min_value=0.0, step=1.0, key="years")
    material = st.selectbox("Material", options=data['Material'].unique(), key="material")
    grade = st.selectbox("Grade", options=data['Grade'].unique(), key="grade")

# Predict Button
if st.button("Predict Condition", key="predict"):
    input_data = pd.DataFrame([[pressure, temp, corrosion, loss, 0, years, 0, 0, material, grade]], 
                              columns=['Pipe_Size_mm', 'Thickness_mm', 'Max_Pressure_psi', 
                                       'Temperature_C', 'Corrosion_Impact_Percent', 'Thickness_Loss_mm', 
                                       'Material_Loss_Percent', 'Time_Years', 'Material', 'Grade'])
    input_data = pd.get_dummies(input_data, columns=['Material', 'Grade'], drop_first=True)
    input_data = input_data.reindex(columns=X.columns, fill_value=0)
    prediction = model.predict(input_data)[0]
    
    # Dynamic result box color based on condition
    color = "#ff4444" if "Critical" in prediction else "#ffca28" if "Moderate" in prediction else "#00cc00"
    st.markdown(f'<div class="result-box" style="background-color: {color};">Condition: {prediction}</div>', unsafe_allow_html=True)

# Footer
st.markdown("<p style='text-align: center; color: var(--text-color, #7f8c8d);'>Powered by AGIS Hackathon 2025</p>", unsafe_allow_html=True)

# -*- coding: utf-8 -*-
"""Gas Predictive Maintenance Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OE0_2tEKQ0eTioGumbkhW2F4OuNDIqHX
"""

import pandas as pd
import numpy as np
import os
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

dataset = pd.read_csv("pipe_thickness_loss_dataset.csv", encoding='ascii', delimiter=',')

dataset.describe()

dataset.head()

dataset.tail()

# Check for missing values in the entire dataset
missing_values = dataset.isna().sum()

# Display the count of missing values per column
print("Missing values per column:")
print(missing_values)

# Check if any column has missing values
if dataset.isna().any().any():
    print("\nThe dataset contains missing values.")
else:
    print("\nNo missing values found in the dataset.")

# Separate features and target

X = dataset.drop(columns=['Condition'])  # Features
y = dataset['Condition']  # Target

# One-Hot Encode Material and Grade

X = pd.get_dummies(X, columns=['Material', 'Grade'], drop_first=True)

# Define features for the model

features = X.columns

# Split the data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model

model = DecisionTreeClassifier(max_depth=3, min_samples_split=20, random_state=42)
model.fit(X_train, y_train)

# Evaluate

accuracy = model.score(X_test, y_test)
print(f"Model Accuracy: {accuracy:.2f}")

from sklearn.metrics import classification_report
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

#!pip install streamlit

import streamlit as st

st.title("Pipeline Maintenance Predictor")
pressure = st.number_input("Max Pressure (psi)")
temp = st.number_input("Temperature (Â°C)")
corrosion = st.number_input("Corrosion Impact (%)")
loss = st.number_input("Thickness Loss (mm)")
years = st.number_input("Time Years")
material = st.selectbox("Material", options=dataset['Material'].unique())
grade = st.selectbox("Grade", options=dataset['Material'].unique())  # Adjust if different

# Create input DataFrame with encoded columns
input_data = pd.DataFrame([[pressure, temp, corrosion, loss, 0, years, 0, 0, material, grade]],
                          columns=['Pipe_Size_mm', 'Thickness_mm', 'Max_Pressure_psi',
                                   'Temperature_C', 'Corrosion_Impact_Percent', 'Thickness_Loss_mm',
                                   'Material_Loss_Percent', 'Time_Years', 'Material', 'Grade'])
input_data = pd.get_dummies(input_data, columns=['Material', 'Grade'], drop_first=True)
input_data = input_data.reindex(columns=features, fill_value=0)  # Align with training columns

prediction = model.predict(input_data)
st.write("Condition:", prediction[0])

